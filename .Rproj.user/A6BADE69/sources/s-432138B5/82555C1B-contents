library(dplyr)
library(shiny)
library(shinyWidgets)
library(shinyBS)
library(shinyjs)
library(sf)
library(leaflet)

# Global
RSlayanan <- readRDS("data/RSlayanan.rds")

# geocodeskab <- readRDS("data/geocodes.rds")
# geocodesprov <- readRDS("data/geocodes1.rds")
bounds <- readRDS("data/bounds.rds")
bounds <- rbind(
  c("Nasional", -2.3071632, 117.2684654, -10.3599874813, 5.47982086834, 95.2930261576, 141.03385176),
  bounds
)

layanan <- readRDS("data/pelayananRefs.rds")
jenisRS <- unique(RSlayanan$JenisRS)
kelasRS <- c("A", "B", "C", "D", "D PRATAMA", "Belum Ditetapkan")
ownerRS <- list(
  `RS Publik` = (RSlayanan %>% filter(StatusRS == "RS Publik") %>% group_by(PenyelenggaraKat) %>% summarise(n = n()) %>% arrange(desc(n)))$PenyelenggaraKat,
  `RS Privat` = (RSlayanan %>% filter(StatusRS == "RS Privat") %>% group_by(PenyelenggaraKat) %>% summarise(n = n()) %>% arrange(desc(n)))$PenyelenggaraKat
)


loc <- list(
  "Nasional",
  Provinsi = as.character(unique(RSlayanan$Provinsi))
)

pal <- c("#5F4690", "#1D6996", "#38A6A5", "#0F8554", "#73AF48", "#EDAD08", "#E17C05", "#CC503E", "#94346E", "#6F4070", "#994E95")

# ui
ui <- bootstrapPage(
  includeCSS("styles.css"),
  includeCSS("dask-style.css"),
  useShinyjs(),
  tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
  leafletOutput("map", width = "100%", height = "100%"),
  #bsCollapse(
  absolutePanel(
    id = "controls2",
    class = "panel panel-default",
    fixed = TRUE,
    top = 10,
    left = 10,
    width = 392,
    height = "auto",
    tags$div(id = 'demo',  class="collapse",
             tags$br(),
             selectInput("loc", "Pilih daerah", loc, selected = "Nasional"),
             selectInput("col", "Warna penanda", c("Tidak", "Jenis RS" = "GroupRS", "Kelas RS" = "KelasRS", "Penyelenggara" = "PenyelenggaraKat"), selected = "Tidak"),
             tags$h4('Filter:'),
             selectizeGroupUI(
               id = "my-filters",
               inline = FALSE,
               params = list(
                 jenisRS = list(inputId = "JenisRS", title = "Jenis", placeholder = 'Semua'),
                 kelasRS = list(inputId = "KelasRS", title = "Kelas", placeholder = 'Semua'),
                 ownerRS = list(inputId = "PenyelenggaraKat", title = "Penyelenggara", placeholder = 'Semua')
               )
             )
    ),
    HTML('<button class="button action-button bttn-stretch" id="toggleCollapse" type="button"><i class="fa fa-arrow-down"></i>&emsp; Klik untuk menambahkan input</button>')
    # actionButton("toggleCollapse", "Klik untuk menambahkan input", icon = icon("arrow-down"), class="button")
  ),
  absolutePanel(
    id = "controls1",
    class = "panel panel-default",
    fixed = TRUE,
    top = 10,
    left = 10,
    width = 392,
    height = 54,
    selectInput("layanan", NULL, c("Pilih jenis layanan" = "", layanan), width = '392px' 
    ),
    tags$head(
      tags$style(
        HTML( "#disease ~ .selectize-control.single .selectize-input {border: 1px solid #fff;}")
      )
    )
  ),
  absolutePanel(
    top = 20,
    right = 20,
    tags$a(img(src='dask-nov.png', align = "center"), href="http://kebijakankesehatanindonesia.net/datakesehatan/")
  )
)

# server
server <- function(input, output, session) {
  observeEvent(input$toggleCollapse, {
    shinyjs::toggle(id = "demo")
    if(input$toggleCollapse %% 2 == 1){
      updateActionButton(session, "toggleCollapse", label = "Sembunyikan", icon = icon("angle-double-up"))
    }else{
      updateActionButton(session, "toggleCollapse", label = "Klik untuk menambahkan input", icon = icon("arrow-down"))
    }
  }, ignoreInit = TRUE)
  
  
  output$map <- renderLeaflet({
    # Use leaflet() here, and only include aspects of the map that
    # won't need to change dynamically (at least, not unless the
    # entire map is being torn down and recreated).
    leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
      htmlwidgets::onRender(
        "function(el, x) {
                    L.control.zoom({ position: 'bottomright' }).addTo(this)
                }"
      ) %>%
      addProviderTiles("CartoDB.Positron") %>%
      fitBounds(95.2930261576, -10.3599874813, 141.03385176, 5.47982086834)
  })
  
  observe({
    by.bounds <- if(input$loc != "Nasional") filter(bounds, query == input$loc) else filter(bounds, query == "Nasional")
    
    leafletProxy("map", session) %>% 
      flyToBounds(lng1 = by.bounds$lon_min, lng2 = by.bounds$lon_max, lat1 = by.bounds$lat_min, lat2 = by.bounds$lat_max)
  })
  
  
  
  data.proc <- reactive({
    if (input$layanan != '') {
      by.layanan <- input$layanan
      by.loc <- input$loc
      by.col <- input$col
      by.jenisRS <- input$JenisRS
      by.kelasRS <- input$KelasRS
      by.ownerRS <- input$PenyelenggaraKat
      
      
      if (input$loc != "Nasional") 
        data.proc <- RSlayanan %>% filter(Provinsi == by.loc) 
      else 
        data.proc <- RSlayanan
      
      data.proc <- data.proc %>%
        rename(Layanan = all_of(by.layanan)) %>%
        filter(Layanan == 1) %>%
        # filter(JenisRS == if (!is.null(by.jenisRS)) by.jenisRS else JenisRS, 
        #        KelasRS == if (!is.null(by.kelasRS)) by.kelasRS else KelasRS,
        #        PenyelenggaraKat == if (!is.null(by.ownerRS)) by.ownerRS else PenyelenggaraKat
        # ) %>% 
        select(Layanan, NamaRS, JenisRS, GroupRS, KelasRS, address, Penyelenggara, PenyelenggaraKat, Provinsi, KabKota, links, lon, lat)
    })
  
  res_mod <- callModule(
    module = selectizeGroupServer,
    id = "my-filters",
    data = data.proc,
    vars = c("JenisRS", "KelasRS", "PenyelenggaraKat")
  )
  
  data.spatial <- st_as_sf(data.proc, coords = c("lon", "lat"), 
                           crs = 4326, agr = "constant")
  labels <- sprintf(
    "<strong>%s</strong><br/><em>%s %s</em><br/>%s: %s<br/>%s: %s<br/>%s: %s<br/><a href='%s'>Buka di Google Map</a>",
    toupper(data.proc$NamaRS), data.proc$JenisRS, paste("Kelas", data.proc$KelasRS), "ALAMAT", data.proc$address, "PROVINSI", data.proc$Provinsi, "PENYELENGGARA", data.proc$Penyelenggara, data.proc$links
  ) %>% lapply(htmltools::HTML)
  
  proxy <- leafletProxy("map", session, data = data.spatial) %>% clearControls() %>% clearMarkers()
  proxy
  if (nrow(data.proc) != 0) {
    
    
    if (by.col != "Tidak") {bubble.pal <- colorFactor(pal, domain = unique(data.proc[, by.col]))}
    
    proxy <- proxy %>%
      addCircleMarkers(
        layerId = data.spatial$Nama_RS,
        radius = data.spatial$Layanan*8,
        color = if (by.col != "Tidak") bubble.pal(data.proc[, by.col]) else "#dc3977",
        popup = labels,
        stroke = T,
        weight = 1,
        fillOpacity = 0.9,
        group = "Circle Markers"
      )
    
    if (by.col != "Tidak") {
      proxy <- proxy %>%
        addLegend(
          position = "bottomright",
          pal = bubble.pal, values = data.proc[, by.col],
          group = "Circle Markers"
        )
    }
  }
  }
  # }
})

}

shinyApp(ui, server)